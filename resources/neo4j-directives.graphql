# This file is just so that the editors will understand the definitions of the neo4j graphql directives

scalar Date
scalar DateTime

enum DirectionEnum {
  IN, OUT
}
enum Neo4jOperations {
  READ, CREATE, UPDATE, DELETE, CONNECT, DISCONNECT
}
input AuthRuleAllow {
  id: String
}
input AuthRule {
  operations: [Neo4jOperations]
  allow: AuthRuleAllow
  roles: [String]
  isAuthenticated: Boolean
  allowUnauthenticated: Boolean
}

"""Indicates that the field is to be mapped to the underlying Neo4j under a different property name."""
directive @alias(property: String!) on FIELD_DEFINITION

directive @auth(
  rules: [AuthRule]
) on FIELD_DEFINITION | INTERFACE | OBJECT

"""Int | Float | String | Boolean | ID | DateTime"""
scalar Scalar


"""Instructs @neo4j/graphql to wrap the property in a coalesce() function during queries, using the single value specified."""
directive @coalesce(
  """The value to use in the coalesce() function. Must be a scalar type and must match the type of the field with which this directive decorates."""
  value: Scalar!,
) on FIELD_DEFINITION

"""Instructs @neo4j/graphql to run the specified Cypher statement in order to resolve the value of the field to which the directive is applied."""
directive @cypher(
  """The Cypher statement to run which returns a value of the same type composition as the field definition on which the directive is applied."""
  statement: String!,
) on FIELD_DEFINITION

directive @default(
  """The default value to use. Must be a scalar type and must match the type of the field with which this directive decorates."""
  value: Scalar!,
) on FIELD_DEFINITION

enum ExcludeOperation {
  CREATE
  READ
  UPDATE
  DELETE
  SUBSCRIBE
}

"""Instructs @neo4j/graphql to exclude the specified operations from query, mutation and subscription generation. If used without an argument, no queries, mutations or subscriptions will be generated for this type."""
directive @exclude(
  operations: [ExcludeOperation!]! = [CREATE, READ, UPDATE, DELETE, SUBSCRIBE]
) on OBJECT

"""Indicates that the field is an identifier for the object type. By default; autogenerated, and has a unique node property constraint in the database."""
directive @id(
  autogenerate: Boolean! = true
  unique: Boolean! = true
) on FIELD_DEFINITION

"""Informs @neo4j/graphql that a field will be resolved by a custom resolver, and allows specification of any field dependencies."""
directive @computed(
  """Fields that the custom resolver will depend on."""
  from: [String!]
) on FIELD_DEFINITION

"""Informs @neo4j/graphql of node metadata"""
directive @node(
  """Map the GraphQL type to a custom Neo4j node label"""
  label: String
  """Map the GraphQL type to match additional Neo4j node labels"""
  additionalLabels: [String]
) on OBJECT

"""Instructs @neo4j/graphql to only expose a field through the Neo4j GraphQL OGM."""
directive @private on FIELD_DEFINITION

"""Instructs @neo4j/graphql to only include a field in generated input type for creating, and in the object type within which the directive is applied."""
directive @readonly on FIELD_DEFINITION

directive @relationship(
  type: String
  direction: DirectionEnum = OUT
) on FIELD_DEFINITION

"""Syntactic sugar to help differentiate between interfaces for relationship properties, and otherwise."""
directive @relationshipProperties on INTERFACE

enum TimestampOperation {
  CREATE
  UPDATE
}

"""Instructs @neo4j/graphql to generate timestamps on particular events, which will be available as the value of the specified field."""
directive @timestamp(
  """Which events to generate timestamps on. Defaults to both create and update."""
  operations: [TimestampOperation!]! = [CREATE, UPDATE]
) on FIELD_DEFINITION

enum CallbackOperation {
  CREATE
  UPDATE
}

enum PopulatedByOperation {
  CREATE
  UPDATE
}

"""Instructs @neo4j/graphql to invoke the specified callback function to populate the field when updating or creating the properties on a node or relationship."""
directive @populatedBy(
  """The name of the callback function."""
  callback: String!
  """Which events to invoke the callback on."""
  operations: [PopulatedByOperation!]! = [CREATE, UPDATE]
) on FIELD_DEFINITION

"""Informs @neo4j/graphql that there should be a uniqueness constraint in the database for the decorated field."""
directive @unique(
  """The name which should be used for this constraint. By default; type name, followed by an underscore, followed by the field name."""
  constraintName: String
) on FIELD_DEFINITION

input FullTextInput {
  name: String!
  fields: [String]!
  defaultThreshold: Int
}

"""
Informs @neo4j/graphql that there should be a fulltext index in the database, allows users to search by the index in the generated schema.
"""
directive @fulltext(indexes: [FullTextInput]!) on OBJECT

"""Instructs @neo4j/graphql to only include a field in the generated input types for the object type within which the directive is applied, but exclude it from the object type itself."""
directive @writeonly on FIELD_DEFINITION

